extends layout

block content
  h1 Framework for day-8
  h2 BluetoothService.Java
  pre
    code.Java.
      public class BluetoothService {
          private static final String TAG = "BluetoothService";
          private final BluetoothAdapter mAdapter;
          private final Context mContext;
          private AcceptThread mAcceptThread;
          private ConnectThread mConnectThread;
          private ConnectedThread mConnectedThread;
          private int mState;


          public BluetoothService(Context context) {
              mContext = context;
              mAdapter = BluetoothAdapter.getDefaultAdapter();
              setState(Constants.STATE_NONE);
          }

          /**
           * Make sure there are no current connections, and then starts listening for connections.
           */
          public synchronized void start() {
              // Cancel any thread attempting to make a connection
              if (mConnectThread != null) {
                  mConnectThread.cancel();
                  mConnectThread = null;
              }

              // Cancel any thread currently running a connection
              if (mConnectedThread != null) {
                  mConnectedThread.cancel();
                  mConnectedThread = null;
              }

              setState(Constants.STATE_LISTEN);

              if(mAcceptThread == null) {
                  mAcceptThread = new AcceptThread(this, mAdapter);
                  mAcceptThread.start();
              }
          }

          /**
           * Connect to another device via bluetooth
           * @param device The BluetoothDevice to connect to
           */
          public synchronized void connect(BluetoothDevice device) {
              Log.d(TAG, "connect to: " + device);

              if(mState == Constants.STATE_CONNECTING) {
                  if(mConnectThread != null) {
                      mConnectThread.cancel();
                      mConnectThread = null;
                  }
              }

              if(mConnectedThread != null) {
                  mConnectedThread.cancel();
                  mConnectedThread = null;
              }

              mConnectThread = new ConnectThread(this, mAdapter, device);
              mConnectThread.start();
              setState(Constants.STATE_CONNECTING);
          }

          /**
           * Called when a connection has been established
           * @param socket The socket that the connection has been established on
           * @param remoteDevice The device that there has been established a connection to
           */
          public synchronized void connected(BluetoothSocket socket, BluetoothDevice remoteDevice) {
              Log.d(TAG, "connected");
              // Cancel the thread that completed the connection
              if (mConnectThread != null) {
                  mConnectThread.cancel();
                  mConnectThread = null;
              }

              // Cancel any thread currently running a connection
              if (mConnectedThread != null) {
                  mConnectedThread.cancel();
                  mConnectedThread = null;
              }

              // Cancel the accept thread because we only want to connect to one device
              if (mAcceptThread != null) {
                  mAcceptThread.cancel();
                  mAcceptThread = null;
              }

              // Start the thread to manage the connection and perform transmissions
              mConnectedThread = new ConnectedThread(this, socket, mContext);
              mConnectedThread.start();

              Handler handler = new Handler(mContext.getMainLooper());
              final BluetoothDevice rd = remoteDevice;
              handler.post(new Runnable() {
                  @Override
                  public void run() {
                      Toast.makeText(mContext, "Connected to: " + rd.getName(), Toast.LENGTH_SHORT).show();
                  }
              });

              setState(Constants.STATE_CONNECTED);
          }

          /**
           * Stop all threads!
           * This will stop both the server and the client part, as well as any ongoing connections
           */
          public synchronized void stop() {
              Log.d(TAG, "stop");

              if (mConnectThread != null) {
                  mConnectThread.cancel();
                  mConnectThread = null;
              }

              if (mConnectedThread != null) {
                  mConnectedThread.cancel();
                  mConnectedThread = null;
              }

              if (mAcceptThread != null) {
                  mAcceptThread.cancel();
                  mAcceptThread = null;
              }

              setState(Constants.STATE_NONE);
          }

          /**
           * Called when the connection failed.
           */
          protected synchronized void connectionFailed() {
              Handler handler = new Handler(mContext.getMainLooper());
              handler.post(new Runnable() {
                  @Override
                  public void run() {
                      Toast.makeText(mContext, "Connection failed..", Toast.LENGTH_SHORT).show();
                  }
              });

              // Start the service over to restart listening mode
              BluetoothService.this.start();
          }

          /**
           * Called when the connection is lost
           */
          protected synchronized void connectionLost() {
              Handler handler = new Handler(mContext.getMainLooper());
              handler.post(new Runnable() {
                  @Override
                  public void run() {
                      Toast.makeText(mContext, "Connection lost..", Toast.LENGTH_SHORT).show();
                  }
              });

              // Start the service over to restart listening mode
              BluetoothService.this.start();
          }

          /**
           * Send out a message to the bluetooth connection
           * @param out The array of bytes to transmit
           */
          public void write(byte[] out) {
              // Create temporary object
              ConnectedThread r;
              // Synchronize a copy of the ConnectedThread
              synchronized (this) {
                  if (mState != Constants.STATE_CONNECTED) return;
                  r = mConnectedThread;
              }
              // Perform the write unsynchronized
              r.write(out);
          }

          public int getState() {
              return mState;
          }

          public void setState(int state) {
              this.mState = state;
          }

          public void setConnectThread(ConnectThread connectThread) {
              this.mConnectThread = connectThread;
          }
      }
  h2 AcceptThread.Java
  pre
    code.Java.
      /**
       * This thread runs while listening for incoming connections. It behaves
       * like a server-side client. It runs until a connection is accepted
       * (or until cancelled).
       */
      public class AcceptThread extends Thread {

          // Debugging
          private static final String TAG = "AcceptThread";

          // The local server socket
          private final BluetoothServerSocket mmServerSocket;
          private final BluetoothService mServer;

          public AcceptThread(BluetoothService server, BluetoothAdapter adapter) {
              BluetoothServerSocket tmp = null;

              // Create a new listening server socket
              try {
                  tmp = adapter.listenUsingRfcommWithServiceRecord(
                          Constants.NAME, Constants.MY_UUID);
              } catch (IOException e) {
                  Log.e(TAG, "Socket Type: " + "listen() failed", e);
              }
              mmServerSocket = tmp;

              mServer = server;
          }

          /**
           * Called when the thread starts running.
           */
          @Override
          public void run() {
              Log.d(TAG, "Socket Type: " +
                      "BEGIN mAcceptThread" + this);
              setName("AcceptThread");

              BluetoothSocket socket;

              // Listen to the server socket if we're not connected
              while (mServer.getState() != Constants.STATE_CONNECTED) {
                  try {
                      // This is a blocking call and will only return on a
                      // successful connection or an exception
                      socket = mmServerSocket.accept();
                  } catch (IOException e) {
                      Log.e(TAG, "Socket Type: " + "accept() failed", e);
                      break;
                  }

                  // If a connection was accepted
                  if (socket != null) {
                      synchronized (mServer) {
                          switch (mServer.getState()) {
                              case Constants.STATE_LISTEN:
                              case Constants.STATE_CONNECTING:
                                  // Situation normal. Start the connected thread.
                                  mServer.connected(socket, socket.getRemoteDevice());
                                  break;
                              case Constants.STATE_NONE:
                              case Constants.STATE_CONNECTED:
                                  // Either not ready or already connected. Terminate new socket.
                                  try {
                                      socket.close();
                                  } catch (IOException e) {
                                      Log.e(TAG, "Could not close unwanted socket", e);
                                  }
                                  break;
                          }
                      }
                  }
              }
              Log.i(TAG, "END mAcceptThread");

          }

          /**
           * Shut down the thread in a nice way
           */
          public void cancel() {
              Log.d(TAG, "Socket " + "cancel " + this);
              try {
                  mmServerSocket.close();
              } catch (IOException e) {
                  Log.e(TAG, "Socket " + "close() of server failed", e);
              }
          }
      }
  h2 ConnectThread.Java
  pre
    code.Java.
      public class ConnectThread extends Thread {
          private static final String TAG = "ConnectThread";
          private final BluetoothSocket mSocket;
          private final BluetoothDevice mDevice;
          private final BluetoothAdapter mAdapter;
          private final BluetoothService mServer;

          public ConnectThread(BluetoothService server, BluetoothAdapter adapter, BluetoothDevice device) {
              mDevice = device;
              BluetoothSocket tmp = null;

              mAdapter = adapter;
              mServer = server;

              // Get a BluetoothSocket for a connection with the
              // given BluetoothDevice
              try {
                  tmp = device.createRfcommSocketToServiceRecord(
                          Constants.MY_UUID);
              } catch (IOException e) {
                  Log.e(TAG, "create() failed", e);
              }
              mSocket = tmp;
          }

          /**
           * Called when the thread has started
           */
          @Override
          public void run() {
              Log.i(TAG, "BEGIN mConnectThread");
              setName("ConnectThread");

              // Always cancel discovery because it will slow down a connection
              mAdapter.cancelDiscovery();

              // Make a connection to the BluetoothSocket
              try {
                  // This is a blocking call and will only return on a
                  // successful connection or an exception
                  mSocket.connect();
              } catch (IOException e) {
                  // Close the socket
                  try {
                      mSocket.close();
                  } catch (IOException e2) {
                      Log.e(TAG, "unable to close() " +
                              " socket during connection failure", e2);
                  }
                  mServer.connectionFailed();
                  return;
              }

              // Reset the ConnectThread because we're done
              mServer.setConnectThread(null);

              // Start the connected thread
              mServer.connected(mSocket, mDevice);
          }

          /**
           * Cancel the attempt to connect
           */
          public void cancel() {
              try {
                  mSocket.close();
              } catch (IOException e) {
                  Log.e(TAG, "close() of connect " + " socket failed", e);
              }
          }
      }
  h2 ConnectedThread.Java
  pre
    code.Java.
      public class ConnectedThread extends Thread {
          private static final String TAG = "ConnectedThread";
          private final BluetoothService mServer;
          private final InputStream mInStream;
          private final OutputStream mOutStream;
          private final BluetoothSocket mSocket;
          private final Context mContext;

          public ConnectedThread(BluetoothService server, BluetoothSocket socket, Context context) {
              Log.d(TAG, "create ConnectedThread");
              mServer = server;
              mContext = context;
              mSocket = socket;

              InputStream tmpIn = null;
              OutputStream tmpOut = null;

              // Get the BluetoothSocket input and output streams
              try {
                  tmpIn = socket.getInputStream();
                  tmpOut = socket.getOutputStream();
              } catch (IOException e) {
                  Log.e(TAG, "temp sockets not created", e);
              }
              mInStream = tmpIn;
              mOutStream = tmpOut;
          }

          @Override
          public void run() {
              super.run();

              Log.i(TAG, "BEGIN mConnectedThread");
              byte[] buffer = new byte[1024];
              int bytes;

              // Keep listening to the InputStream while connected
              while (mServer.getState() == Constants.STATE_CONNECTED) {
                  try {
                      // Read from the InputStream
                      bytes = mInStream.read(buffer);

                      // Show the message as a toast on the main thread
                      Handler handler = new Handler(mContext.getMainLooper());
                      final byte[] fbuffer = buffer;
                      handler.post(new Runnable() {
                          @Override
                          public void run() {
                              Toast.makeText(mContext, "Received message: " + new String(fbuffer), Toast.LENGTH_SHORT).show();
                          }
                      });
                  } catch (IOException e) {
                      Log.e(TAG, "disconnected", e);
                      mServer.connectionLost();
                      break;
                  }
              }
          }

          /**
           * Shutdown the connection
           */
          public void cancel() {
              try {
                  mSocket.close();
              } catch (IOException e) {
                  Log.e(TAG, "close() of connect socket failed", e);
              }
          }

          /**
           * Write some data to the output stream
           * @param out The data to write
           */
          public void write(byte[] out) {
              try {
                  mOutStream.write(out);
              } catch (IOException e) {
                  Log.e(TAG, "Exception during write", e);
              }
          }
      }
  h2 Constants.Java
  pre
    code.Java.
      public class Constants {
          public static final String NAME = "BluetoothChatInsecure";

          public static final UUID MY_UUID =
                  UUID.fromString("99665af9-660c-49ac-89be-fb4d0b82eaab"); // From https://www.uuidgenerator.net/

          // Constants that indicate the current connection state
          public static final int STATE_NONE = 0;       // we're doing nothing
          public static final int STATE_LISTEN = 1;     // now listening for incoming connections
          public static final int STATE_CONNECTING = 2; // now initiating an outgoing connection
          public static final int STATE_CONNECTED = 3;  // now connected to a remote device
      }
      
      
      
      