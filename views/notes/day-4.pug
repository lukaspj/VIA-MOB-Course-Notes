extends layout

block header
  h2 Course page for: #[strong Mobile Applications]

block content
  section.column.small-12
    h2 Lecture notes: day 4
    p.
      In the following lecture notes, a #[em component] is defined as described in the
      #[a(href="https://developer.android.com/guide/components/fundamentals.html#Components") documentation].
    h4 Catching user-interface events
    p.
      In order to catch an event from the user-interface (such as when something is clicked), you simply have to
      add a public method to the #[tt Activity], and then add the #[tt onClick] attribute to an element in the
      user-interface.
    p.
      First, we will look at the method we need to add to the #[tt Activity]. It should return void and take a
      #[tt View] as the parameter.
    p
      pre
        code.Java.
          public void showPopUp(View view) {
            // Do something
          }
    p.
      To bind the method to an event, simply add the #[tt android:onClick="showPopUp"] attribute to a #[tt View],
      like this:
    p
      pre
        code.XML.
          &lt;Button
              android:layout_width="wrap_content"
              android:layout_height="wrap_content"
              android:text="Show PopUp"
              android:onClick="showPopUp"/&gt;
    p.
      Now, when the #[tt Button] is pressed, the showPopUp method will be called.
    h4 Creating a new Activity
    p.
      So far you have had your default MainActivity, which Android Studio probably set up for you. In today's
      lecture, we will look at creating a new Activity, which we can then start using Intents. So, first things
      first. We should create a new Activity. First, create a new #[tt Java] file, next to the MainActivity.java file
      (in the #[tt app/src/main/java/your/package/name/] folder).
    p.
      The new Java file, should have a new activity, which extends the "Activity" class, just like the MainActivity.
      As shown in the following code snippet:
    p
      pre
        code.Java.
          package com.example.lukas.myapplication;

          import android.app.Activity;
          import android.os.Bundle;

          public class PopUpActivity extends Activity {

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  setContentView(R.layout.activity_popup);
              }
          }
    p.
      Now, that you have created a new Activity, you have to add it to the manifest. Otherwise the Android system will
      not be able to find it nor use it. This is very simple, just add the following snippet to the manifest, inside
      the application tag:
    p
      pre
        code.XML.
          &lt;activity android:name=".PopUpActivity" /&gt;
    p.
      Now you have a new Activity for your app, we will look at how you can start it, right after we look at Intents.
    h4 Adding permissions
    p.
      In case your app needs any permissions, such as the permission to process outgoing calls, you will need to add
      the permission to the manifest with the uses-permission tag, like so:
    p
      pre
        code.XML.
          &lt;uses-permission android:name="android.permission.PROCESS_OUTGOING_CALLS" /&gt;
    h4 Intents
    p.
      An intent, is a message that you can send to request an action from another app component. They can be used
      in several ways, but they have three primary uses:
    ul
      li Starting another activity
        p.
          You can start a new instance of an Activity, by passing an Intent to #[tt startActivity()]. If you
          want to receive a result from the Activity, then use #[tt startActivityForResult()], which will call
          #[tt onActivityResult] on your Activity when it's done.
      li Starting a "Service" (a component that runs in the background without an interface)
        p.
          You can start a Service to perform some operation with the #[tt startService()] method, we will look at
          this later.
      li Delivering a broadcast
        p.
          A broadcast is a message that any app can receive. There are various broadcasts for system events, such as
          phone calling or device starts charging. You can send a broadcast by passing an Intent to either
          #[tt sendBroadcast()], #[tt sendOrderedBroadcast()] or #[tt sendStickyBroadcast()] (deprecated)
        p.
          An ordinary broadcast cannot be aborted and cannot propagate results. An ordered broadcast however
          will send the broadCast to all interested BroadcastReceivers, one at a time and allow the result to
          propagate.
    a(href="https://developer.android.com/guide/components/intents-filters.html") Read about Intents, and intent filters
    p.
      There are two types of intents, the #[strong Explicit intents] and the #[strong Implicit intents].
      In the explicit intent, you specify exactly which component you want to respond to the intent.
      As you know the full qualified class-name of the components in your own app, this is typically used
      for communication inside your own app (like starting a new activity).
      The implicit intents do not specify a specific component, but instead they declare some general
      action they want to perform (like "Send Email"), and then components from any app can pitch-in and
      respond to it.

    h4 Starting an Activity with an intent
    p.
      First, create the new #[tt Intent] object, here we will use an explicit intent, as we want to start a specific
      #[Activity] from our application. For the intent to be explicit, we need to explicitly specify the class the
      #[tt Intent] is to be send to. Then we will simply call #[tt startActivity] method. Example:
    p
      pre
        code.Java.
          Intent intent = new Intent(this, PopUpActivity.class);
          startActivity(intent);
    p.
      We can send some message with the intent, by using the #[tt putExtra] method which takes a key and a value.
    p
      pre
        code.Java.
          public static final String POPUP_MESSAGE = "com.example.lukas.myapplication.POPUP_MESSAGE";
          ...
          Intent intent = new Intent(this, PopUpActivity.class);
          intent.putExtra(POPUP_MESSAGE, "Hello World!");
          startActivity(intent);
    h5 Accessing the message in the Intent
    p.
      To access the message stored with #[tt putExtra], we can use the #[tt getIntent] method in the receiving Activity.
      We can then access the message values using #[tt intent.get(Type)Extra(key)], where "(Type)" should be replaced
      with what type of value you are trying to retrieve (such as String, Boolean etc.). Example:
    p
      pre
        code.Java.
          public class PopUpActivity extends Activity {

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  setContentView(R.layout.activity_popup);

                  Intent intent = getIntent();
                  String message = intent.getStringExtra(MainActivity.POPUP_MESSAGE);
                  TextView textView = (TextView)findViewById(R.id.messageView);
                  textView.setText(message);
                  textView.invalidate();
              }
          }
    h4 Starting an Activity from another app with an intent
    p.
      We can incorporate activities from other apps, if they listen for intents. An example is an email app, we can
      use the built-in email client (or any other email client) to send an email from our app. We need to use implicit
      intents for this purpose, since we don't necessarily know the fully qualified class paths to the email client's
      activity, and we might want the user to choose the mail app that it likes the most.
    p.
      In order to create such an implicit intent, we simply create a new intent, set the appropriate #[tt Action]
      and give it the meta-data needed such that the Activity, receiving the intent can complete the task.
    p.
      We will re-use the email example. If we want to send an email from our app, we will use the action
      #[tt Intent.ACTION_SEND]. The #[tt ACTION_SEND] action means that we want to send some data.
    p
      pre
        code.Java.
          Intent mailIntent = new Intent();
          mailIntent.setAction(Intent.ACTION_SEND);
    p.
      Now, that we have an Intent with the appropriate #[tt Action], we need to set the meta-data for the intent
      such that the receiving Activity, knows what to do with the Intent. If you're sending a mail, then you
      need to set the type of the intent to "test/html" and you can provide email address, subject and content
      for the email, like so:
    p
      pre
        code.Java.
          public void sendMail(View view) {
              Intent mailIntent = new Intent();
              mailIntent.setAction(Intent.ACTION_SEND);
              mailIntent.setType("text/html");
              mailIntent.putExtra(Intent.EXTRA_EMAIL, "test@someone.com");
              mailIntent.putExtra(Intent.EXTRA_SUBJECT, "NEWS");
              mailIntent.putExtra(Intent.EXTRA_TEXT, "Some mail content");
              startActivity(Intent.createChooser(mailIntent, "Send Mail"));
          }
    p.
      This is just one example of what you can do with the framework actions. To see all the different available
      Actions, look at the reference for the
      #[a(href="https://developer.android.com/reference/android/content/Intent.html") Intent].
    h4 Receiving an implicit intent from any app
    p.
      To receive an implicit intent, you need to create the Activity that should receive the intent, for example it
      it could be an Activity, which catches the "Send" intent, but instead of sending it, it actually display the mail.
    p.
      First, you have to create the Activity. Just make it an empty Activity like this:
    p
      pre
        code.Java.
          public class FakeMailActivity extends Activity {
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
              }
          }
    p.
      Now, add the new Activity to the manifest, and give it a filter that catches the Send intent, for "text/html"
      mimeTypes.
    p
      pre
        code.Xml.
          &lt;activity android:name=".FakeMailActivity"&gt;
              &lt;intent-filter&gt;
                  &lt;action android:name="android.intent.action.SEND" /&gt;
                  &lt;category android:name="android.intent.category.DEFAULT"/&gt;
                  &lt;data android:mimeType="text/html" /&gt;
              &lt;/intent-filter&gt;
          &lt;/activity&gt;
    p.
      Now, whenever you send the "Send" intent for "text/html", it will ask whether you want to use the Mail app
      or our custom app.
    p
      img(src="/static/images/email_chooser.png")

    h4 Receiving broadcasts
    p.
      Your app might send an Intent as a broadcast, furthermore the Android system sends broadcasts all the time.
      To receive such a broadcast, you would need a #[tt BroadcastReceiver] class, which could look like this:
    p
      pre
        code.Java.
          public class NoPhoneCallsReceiver extends BroadcastReceiver {
              @Override
              public void onReceive(Context context, Intent intent) {
              }
          }
    p.
      We could then make this Receiver, receive the "OutgoingCalls" Broadcast, we simply have to add it to the
      manifest (at the same place where you would add a new activity), and give it an intent filter, like so:
    p
      pre
        code.XML.
          &lt;receiver android:name=".NoPhoneCallsReceiver"&gt;
              &lt;intent-filter&gt;
                  &lt;action android:name="android.intent.action.NEW_OUTGOING_CALL" /&gt;
              &lt;/intent-filter&gt;
          &lt;/receiver&gt;
    p.
      Intercepting this outgoing phone-calls broadcast, can have many uses, such as calling your friends via
      VoIP instead of over the phone network, or making sure that the correct area code is appended, or to
      block any calls to numbers that are not on a parental-control whitelist.
    p.
      Now, a fun thing to do would be to make this Receiver, stop any outgoing phone calls, like so:
    p
      pre
        code.Java.
          public class NoPhoneCallsReceiver extends BroadcastReceiver {
              @Override
              public void onReceive(Context context, Intent intent) {
                  setResultData(null);
              }
          }


    ul
      li
        a(href="/notes/code-example-pop-up-activity") PopUp Activity class
      li
        a(href="/notes/code-example-exercise-day-4") Solutions to the exercises.

  section.column.small-12
    h2 Exercises
    h4 Exercise 1
    p.
      Create an app that has a main activity, and another activity that simply shows a layout with an image. Add a
      Button to the main activity's layout, that will open the second activity.
    h4 Exercise 2
    p.
      Create an app that has a main activity, and another activity that simply shows a layout with an EditText. Add a
      Button and a EditText to the main activity's layout, that will open the second activity which will display the
      text written in the EditText.
    h4 Exercise 3
    p.
      Create an Activity that has a "Send Mail" button, which opens an Email dialog.
    h4 Exercise 4
    p.
      Create an Activity that acts as an alternative for the email client when pressing the "Send Mail" from Exercise 3.
    h4 Exercise 5
    p.
      Create a BroadcastReceiver, that blocks all outgoing phone-calls.
    h4 Exercise 6
    p.
      Create an Activity that sends a Broadcast, and a BroadcastReceiver that receives the given Broadcast.

    h2 Solutions
    ul
      li
        a(href="/notes/code-example-d4-ex1") Exercise 1
      li
        a(href="/notes/code-example-d4-ex2") Exercise 2
      li
        a(href="/notes/code-example-d4-ex3") Exercise 3
      li
        a(href="/notes/code-example-d4-ex4") Exercise 4
      li
        a(href="/notes/code-example-d4-ex5") Exercise 5
