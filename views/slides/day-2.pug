extends layout

block content
  section
    h2 Resources, fragments and custom Views
    i Day 2
  section
    h2 Agenda
    ul
      li Resources - Continued
      li Fragments
      li Custom Views
      li Custom drawing
  section
    section
      h2 Resources
      p.
        There are a lot of different types of resources. Some of them are:
      dl
        dt String Resources
        dd. 
          For storing any displayed strings, great for localization or
          easy changes to text without touching the layouts.
        dt Drawable Resources
        dd.
          For storing various graphics formats.
        dt Layout Resource
        dd.
          Defines the layout for various UI's.
      pre
        code.Xml.
          &lt;Button
              android:text="@string/submit" /&gt;
    section
      h2 Providing resources
      ul
        li You might want to have e.g. different layouts for different orientations
        li For this purpose: Provide two layouts
        li One for landscape one for portrait
        li Simply put one in the #[tt res/layout-port] folder and one in the #[tt res/layout-land] folder
  section
    section
      h2 Fragments
      ul
        li You can fragment the View into parts with different responsibilities
        li Android Fragments supports this
      img(src="/static/images/fragment-text-land.png")
    section
      h4 Fragments - the purpose
      ul
        li Re-use parts of an activity
        li Insert/remove a part of the UI at run-time
        li Swap a part of the UI with another part at run-time
      img(src="/static/images/fragment_display_landscape_portrait.png")
    section
      h4 Fragments - how to
      ul
        li Create a new layout for the fragment
        li Create a new class, that extends Fragment
        li Insert the fragment into your existing activity by XML or by code
      pre
        code.Java.
          import android.os.Bundle;
          import android.support.v4.app.Fragment;
          import android.view.LayoutInflater;
          import android.view.ViewGroup;

          public class ArticleFragment extends Fragment {
              @Override
              public View onCreateView(LayoutInflater inflater, ViewGroup container,
                    Bundle savedInstanceState) {
                  // Inflate the layout for this fragment
                  return inflater.inflate(R.layout.article_view, container, false);
              }
          }
    section
      h4 Fragments - inserting a fragment in XML
      pre
        code.Xml.
          &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="horizontal"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent"&gt;
  
              &lt;fragment android:name="com.example.android.fragments.ArticleFragment"
                        android:id="@+id/article_fragment"
                        android:layout_weight="2"
                        android:layout_width="0dp"
                        android:layout_height="match_parent" /&gt;
  
          &lt;/LinearLayout&gt;
    section
      h4 Fragments - inserting a fragment in code
      pre
        code.Java.
          // Create new fragment
          Fragment newFragment = new ExampleFragment();
          // Begin the transaction
          FragmentTransaction transaction = getFragmentManager().beginTransaction();

          // Replace whatever is in the fragment_container view with this fragment,
          // and add the transaction to the back stack
          transaction.replace(R.id.fragment_container, newFragment);
          transaction.addToBackStack(null);

          // Commit the transaction
          transaction.commit();
  section
    section
      h2 Creating new views
      ul
        li Create the new View class
        li Either extend 'View' or one of the existing Views such as 'TextView'
        li Add the necessary attributes for the view, and read them in the new class
        li Add the new View to the layout
    section
      h4 Creating new Views - the class
      pre
        code.Java.
          // New View from scratch
          class PieChart extends View {
              public PieChart(Context context, AttributeSet attrs) {
                  super(context, attrs);
              }
          }

          // Modify an existing View
          class MyTextView extends TextView {
              public MyTextView(Context context, AttributeSet attrs) {
                  super(context, attrs);
              }
          }
    section
      h4 Creating new Views - the attributes
      pre
        code.xml.
          &lt;resources&gt;
             &lt;declare-styleable name="PieChart"&gt;
                 &lt;attr name="showText" format="boolean" /&gt;
                 &lt;attr name="labelPosition" format="enum"&gt;
                     &lt;enum name="left" value="0"/&gt;
                     &lt;enum name="right" value="1"/&gt;
                 &lt;/attr&gt;
             &lt;/declare-styleable&gt;
          &lt;/resources&gt;
    section
      h4 Creating new Views - reading the attributes
      pre
        code.Java.
          public PieChart(Context context, AttributeSet attrs) {
             super(context, attrs);
             TypedArray a = context.getTheme().obtainStyledAttributes(
                  attrs,
                  R.styleable.PieChart,
                  0, 0);

             try {
                 mShowText = a.getBoolean(R.styleable.PieChart_showText, false);
                 mTextPos = a.getInteger(R.styleable.PieChart_labelPosition, 0);
             } finally {
                 a.recycle();
             }
          }
    section
      h4 Creating new Views - adding it to the layout
      pre
        code.Xml.
          &lt;?xml version="1.0" encoding="utf-8"?&gt;
          &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
             xmlns:custom="http://schemas.android.com/apk/res/your.package.name"&gt;
           &lt;your.package.name.PieChart
               custom:showText="true"
               custom:labelPosition="left" /&gt;
          &lt;/LinearLayout&gt;
  section
    section
      h2 Custom drawing
      ul
        li Need two parts: Paint and a Canvas
        li Initialize the Paint objects
        li Override onDraw and draw on the supplied Canvas with the given Paints
        li Handle resizes in onSizeChanged 
        li Use onMeasure if you want control/influence on the size 
    section
      h4 Custom drawing - init
      pre
        code.Java.
          private void init() {
              // Used ANTI_ALIAS_FLAG to avoid jagged edges on the text
              mTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
              mTextPaint.setColor(Color.GREEN);

              if (mTextHeight == 0) {
                  mTextHeight = mTextPaint.getTextSize();
              } else {
                  mTextPaint.setTextSize(mTextHeight);
              }

              // Setup the Paint for one of the pies
              mPiePaint1 = new Paint(Paint.ANTI_ALIAS_FLAG);
              mPiePaint1.setStyle(Paint.Style.FILL);
              mPiePaint1.setTextSize(mTextHeight);
              mPiePaint1.setColor(Color.LTGRAY);
  
                // Repeat for the other pie
                mPiePaint2 = new Paint(Paint.ANTI_ALIAS_FLAG);
                mPiePaint2.setStyle(Paint.Style.FILL);
                mPiePaint2.setTextSize(mTextHeight);
                mPiePaint2.setColor(Color.MAGENTA);
          }
    section
      h4 Custom drawing - onDraw
      pre
        code.Java.
          @Override
          protected void onDraw(Canvas canvas) {
              super.onDraw(canvas);

              int height = getMeasuredHeight();
              int width = getMeasuredWidth();

              // drawArc takes 5 arguments. The bounding rectangle of the arc, the startAngle, the sweepAngle (which
              // is how much to sweep from the startAngle), a boolean that says whether the fill should join at the
              // center, and finally the paint for the arc.
              canvas.drawArc(
                      mPieBounds,
                      mPieStart,
                      mPieEnd,
                      true,
                      mPiePaint1
              );

              // Draw the other arc
              canvas.drawArc(
                      mPieBounds,
                      mPieEnd,
                      360 - (mPieEnd - mPieStart),
                      true,
                      mPiePaint2
              );

              float textWidth = mTextPaint.measureText(mText);
              // Compute the center of the View
              int centerX = width / 2;
              // Draw the text at the bottom of the View, centered horizontally
              canvas.drawText(mText, centerX - textWidth / 2, height, mTextPaint);
          }
    section
      h4 Custom drawing - onSizeChanged
      pre
        code.Java.
          @Override
          protected void onSizeChanged(int w, int h, int oldw, int oldh) {
              super.onSizeChanged(w, h, oldw, oldh);

              // Make sure that there is room for the text at the bottom
              int pieHeight = h - (int)mTextHeight;

              // Compute the maximum pie diameter
              int maxDiameter = Math.min(w, pieHeight);

              int centerX = w / 2;
              int centerY = pieHeight / 2;
              int radius = maxDiameter / 2;

              mPieBounds = new RectF(
                      centerX - radius,
                      centerY - radius,
                      centerX + radius,
                      centerY + radius
              );
          }
    section
      h4 Custom drawing - the result
      div.split-1-3-left
        img(src="/static/images/pie-chart-port.png")
      div.split-2-3-right
        img(src="/static/images/pie-chart-land.png")